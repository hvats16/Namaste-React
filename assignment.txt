1. What is Emmet?
=> Emmet is a free add-on for your text editor. It allows you to type shortcuts that are then expanded into full pieces of code. 

2. Difference between a Library and Framework?
=> A framework is used for building and deploying an application quickly. When we use a framework, we can use resources to facilitate faster development and a greater user experience. A library is used to enhance the functionality of an application.

3. What is CDN? Why do we use it?
=> A CDN, or content delivery network, is a network or collection of servers in locations all over the world. Also known as a content distribution network, a CDN can refer to many types of content delivery services, such as load balancing and video streaming. A CDN improves efficiency by introducing intermediary servers between the client and the website server. These CDN servers manage some of the client-server communications. They decrease web traffic to the web server, reduce bandwidth consumption, and improve the user experience of your applications.

4. Why is React known as React?
=> React is called "React" because of its core feature, which is its ability to "react" or respond dynamically to changes in data. React was originally created by Facebook in 2011 for use in their own web applications, and it was released as an open-source project in 2013.

5. What is crossorigin in script tag?
=> The crossorigin attribute sets the mode of the request to an HTTP CORS Request. Web pages often make requests to load resources on other servers. Here is where CORS comes in. A cross-origin request is a request for a resource (e.g. style sheets, iframes, images, fonts, or scripts) from another domain.

6. What is diference between React and ReactDOM?
=>  React is a JavaScript library for building User Interfaces and ReactDOM is the JavaScript library that allows React to interact with the DOM. Think again. As the name implies, ReactDOM is the glue between React and the DOM.

7. What is difference between react.development.js and react.production.js files via CDN?
=> The development build is used - as the name suggests - for development reasons. You have Source Maps, debugging and often times hot reloading ability in those builds. The production build, on the other hand, runs in production mode which means this is the code running on your client's machine.

8. What is async and defer? -
=> Async allows your script to run as soon as it's loaded, without blocking other elements on the page. Defer means your script will only execute after the page has finished loading. In most cases, async is the better option â€” but there are exceptions.

9. Package lock.json is a very important file. It locks the version and never have to keep it in git ignore.

10. HMR - Hot Module Replacement -- Hot Module Replacement (HMR) allows your web components to be updated as you develop, without needing a full refresh of the browser. It is done by FIle Watcher Algorithm written in C++.

11. .parcel-cache is the space for parcel to do all the things and dist folder contains all the minified versions of the files.

12. Parcel - Hot Module Reload using File Watcher Algorithm 
&& Created a server for you with Hot reload 
&& Bundling 
&& Minfiy 
&& Cleaning our code 
&& Dev and Production build 
&& Super Fast Algorithm 
&& Image Optimization 
&& Caching While development
&& Compression
&& Compatible with older version of browser
&& We can also build https on local dev machine - npx parcel index.html --https
&& Manages Port Number
&& We should put .parcel-cache in our .gitignore because it will be auto-generate. // Anything which will be auto-generate we'll put it inside .gitignore.
&& Consistent Hashing Algorithm
&& Zero Config Bundler
&& Tree Shaking - Removing Unwanted Code

12. Transitive dependencies - A dependency that is not directly used in your project, but brought in by other third-party components.

// React.createElement gives us an object => Obejct is then converted into HTML code and inject the code in the DOM.

//JSX is a HTML like syntax inside JavaScript but it is not JavaScript. JSX uses React.createElement behind the scenes and converted into object and into HTML code and inject the code in the DOM. This is done by BABEL.

// There are two package-lock.json in React project one which maintain exact version of all the dependencies our project have but the package-lock.json in node-module folder mainatin the Transitive dependency of the project.

// const Heading = (
    <h1>Hello World!</h1>
); --- This is known as React elements

// React Components --- 1. Functional Based -- New Way of Writting Code -- Name of Functional Component starts with Capital letter.
                        2. Class Based Components

// At the end of the day React Element is just an object and React Functional Component is just an Function.

// If we have to use a component inside a component it is called component composition.

// JSX have only one parent.

//Config Driven UI 

//Optional Chaining

// no key <<<<<<<<<<<<<<<<< index key <<<<<<<<< unique key (Best pratice)


/**
     Header
        - Logo(Title)
        - Nav Items(Right Side)
        - Cart
     Body 
        - Search bar
        - RestrauntList
          - RestaurantCard (many cards)
              - Image
              - Name
              - Rating
              - Cusines
     Footer
      - links
      - Copyright
    
    */

// Composing Comopnentss

//Config Driven UI



// no key (not acceptable)<<<<<<<<<<< index key(last option) <<<<< unquie key (best practice)

// Never ever write a useState inside if-else or inside a for-loop.
// UseState is a hook that is used to create local state variable inside search text.
// Formik - For forms

//Client Side Routing AND Server Side Routing

// Server-Side-Routing == In Server side Routing all our pages comes from Server
// Client Side Routing == In client side Routing all our components are already in our code.


// The most important part of class based component is render method.

// We never mutate state directly. React has to keep a track of your state to do the reconcillation

//The major difference in CommonJS and ES module is of synchronous and asynchronous nature, which might affect performance: --CommonJS modules are synchronous, which isn't an issue in the case of small module execution. However it can delay execution for larger modules.
Loading and parsing of ES modules is asynchronous.


// Never Compare your lifecycle methods to Functional Components

//ComponentWillUnmount will call when we change the component

// When we are changing the pages or components it won't reloading so we have to clear the intervals of the timeouts. And everytime we come on that page it will twice the intervals. And we have to clear interval in ComponentWillUnmount using this... it will refer to that interval.
Ex - this.timer = setInterval(()=>{console.log("Hi:)},1000);
clearInterval(this.timer);

// And in case of useEffect(()=>{
  let timer = setInterval(()=>{console.log("Hi:)},1000);
  return()=>{
    clearInterval(timer);
  }
})